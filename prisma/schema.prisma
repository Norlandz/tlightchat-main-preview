// @pb[serialize convert to class] /////////////////////////////
// @pb[serialize convert to class] 
// @pb[serialize convert to class] []
// @pb[serialize convert to class]  to the "User" model that is generated by Prisma. Each "User" that is returned from a Prisma CRUD operation would automatically have these user/application-defined functions or properties.
// @pb[serialize convert to class] <>
// @pb[serialize convert to class] https://github.com/prisma/prisma/issues/5998
// @pb[serialize convert to class] 
// @pb[serialize convert to class] 
// @pb[serialize convert to class] []
// @pb[serialize convert to class] Same thing here. I want to work object orientated and have classes for my datatypes with some extra utility functions.
// @pb[serialize convert to class] And I really have to stick to the generated types from the Prisma client and can't use my own classes?
// @pb[serialize convert to class] <>
// @pb[serialize convert to class] https://github.com/prisma/prisma/issues/5998
// @pb[serialize convert to class] 
// @pb[serialize convert to class] 
// @pb[serialize convert to class] []
// @pb[serialize convert to class] I did it this way
// @pb[serialize convert to class] 
// @pb[serialize convert to class] In file: user.entity.ts
// @pb[serialize convert to class] 
// @pb[serialize convert to class] import { Role, User as UserPrisma } from '@prisma/client';
// @pb[serialize convert to class] import { Exclude } from 'class-transformer';
// @pb[serialize convert to class] 
// @pb[serialize convert to class] export class User implements UserPrisma {
// @pb[serialize convert to class]   id: string;
// @pb[serialize convert to class] <>
// @pb[serialize convert to class] https://stackoverflow.com/questions/69166198/how-to-serialize-prisma-object-in-nestjs
// @pb[serialize convert to class] 
// @pb[serialize convert to class] 
// @pb[serialize convert to class] []
// @pb[serialize convert to class] so, a pretty common pattern for ORMs is that you can typically attach methods to every instance of a model. In type ORM you'd do that via the entity:
// @pb[serialize convert to class] 
// @pb[serialize convert to class] @Entity()
// @pb[serialize convert to class] export class User extends BaseEntity {
// @pb[serialize convert to class]     @Column()
// @pb[serialize convert to class]     username: string;
// @pb[serialize convert to class] 
// @pb[serialize convert to class]     async validatePassword(password: string) {
// @pb[serialize convert to class]         ...
// @pb[serialize convert to class]     }
// @pb[serialize convert to class] }
// @pb[serialize convert to class] <>
// @pb[serialize convert to class] https://github.com/prisma/prisma/discussions/2763
// @pb[serialize convert to class] 
// @pb[serialize convert to class] 
// @pb[serialize convert to class] []
// @pb[serialize convert to class] As Prisma is not an ORM as described [here](https://www.prisma.io/docs/understand-prisma/prisma-in-your-stack/is-prisma-an-orm), it just returns a plain JS object on querying. So it's not possible to add methods on the model as there is no Instance, it's just a plain object that's returned.
// @pb[serialize convert to class] <>
// @pb[serialize convert to class] https://github.com/prisma/prisma/discussions/2763
// @pb[serialize convert to class] 
// @pb[serialize convert to class] 
// @pb[serialize convert to class] []
// @pb[serialize convert to class] One way would be creating a custom class in which you require the methods, query data in those methods via Prisma and add your own methods on the class and use that Instance (something like Active Record). I don't think it would be advisable to monkey-patch custom methods on the Prisma created methods.
// @pb[serialize convert to class] <>
// @pb[serialize convert to class] https://github.com/prisma/prisma/discussions/2763
// @pb[serialize convert to class] 
// @pb[serialize convert to class] 
// @pb[serialize convert to class] []
// @pb[serialize convert to class] class Users {
// @pb[serialize convert to class]   constructor(private readonly prismaUser: PrismaClient['user']) {}
// @pb[serialize convert to class] <>
// @pb[serialize convert to class] https://www.prisma.io/docs/orm/prisma-client/queries/custom-models#wrap-a-model-in-a-class
// @pb[serialize convert to class] 
// @pb[serialize convert to class] 
// @pb[serialize convert to class] []
// @pb[serialize convert to class] , I'm afraid there's no way of going around using DTOs.
// @pb[serialize convert to class] <>
// @pb[serialize convert to class] https://www.reddit.com/r/node/comments/lihfu8/how_do_you_serialize_prisma_objects_in_nestjs/
// @pb[serialize convert to class] 
// @pb[serialize convert to class] 
// @pb[serialize convert to class] # prismajs just dont seem support to a class with method
// @pb[serialize convert to class] 1. entity .. simple enough may not need 
// @pb[serialize convert to class] 1. wrapper class 
// @pb[serialize convert to class] 1. said its about serialization 
// @pb[serialize convert to class] 1. actually what was the depth of json serialization with @OneToMany (dk why didnt have such pb; guess didnt on the web side; but just on the db side)
// @pb[serialize convert to class] 
// @pb[serialize convert to class] pb of other serialization of class with array field is that
// @pb[serialize convert to class] you may not able to deserialize back to a class ... 
// @pb[serialize convert to class] (dk ... may try ... but i think format is different... 
// @pb[serialize convert to class] ((aga if have to will fall back to typeorm ... 
// @pb[serialize convert to class] ((dk more can think on this; just ct try with simple jsobj for now ..
// @pb[serialize convert to class] 
// @pb[serialize convert to class] /////////////////////////////

// Introduction to Prisma Client | Prisma Docs
// https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/introduction
// 
// Learn Prisma In 60 Minutes - YouTube
// https://www.youtube.com/watch?v=RebA5J-rlwg&t=2409s
// 
// Prisma Course For Beginners - Full Prisma Tutorial CRUD, Associations... - YouTube
// https://www.youtube.com/watch?v=J8ObGtfy5n0
// 
// Prisma Course: Zero To Hero üéØ - YouTube
// https://www.youtube.com/watch?v=yW6HnMUAWNU

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "sqlite"
  url = env("DATABASE_URL")
}

// pnpm i -D prisma
// pnpm install @prisma/client
// npx prisma init --datasource-provider sqlite
//   npx prisma generate 
// npx prisma migrate dev --name init
// 
// 
//   npx prisma db pull 
// 
// npx prisma studio
// 
// // npx prisma migrate dev --name init --create-only
// // npx prisma migrate deploy

model UserWeb {
  userWebId                        String            @id @default(uuid()) // said, manual add, dont use db to add
  userAuth0Id                      String?           @unique
  username                         String
  email                            String            @unique
  creationTime                     DateTime          @default(now()) // dk, do hibernate use final to prevent the update?
  lastLoginTime                    DateTime?
  rank                             Int?
  det_Anonymous                    Boolean           @default(false)
  arr_chatMessageInfo_SentFromSelf ChatMessageInfo[] @relation("arr_chatMessageInfo_SentFromSelf")
  arr_chatMessageInfo_SentToSelf   ChatMessageInfo[] @relation("arr_chatMessageInfo_SentToSelf")
  seq_debug                        Int?

  // @@index([email])
}

model ChatMessageInfo {
  uuid         String   @id @default(uuid())
  creationTime DateTime @default(now())
  // msgType      ChatMsgType @default(text)
  msgType      String   @default("text")
  msgData      String
  msgFrom      UserWeb  @relation("arr_chatMessageInfo_SentFromSelf", fields: [msgFromId], references: [userWebId])
  msgFromId    String
  msgTo        UserWeb  @relation("arr_chatMessageInfo_SentToSelf", fields: [msgToId], references: [userWebId])
  msgToId      String
  seq_debug    Int?
}

// reactjs - Error validating: You defined the enum but the current connector does not support enums - Stack Overflow
// https://stackoverflow.com/questions/72947980/error-validating-you-defined-the-enum-but-the-current-connector-does-not-suppor
// 
// typescript - How do handle enum values in jest test with prisma? Group[] not assignable to Group - Stack Overflow
// https://stackoverflow.com/questions/69208189/how-do-handle-enum-values-in-jest-test-with-prisma-group-not-assignable-to-gr
// 
// Support `enum` in SQLite (via polyfill) ¬∑ Issue #2219 ¬∑ prisma/prisma
// https://github.com/prisma/prisma/issues/2219
// 
// why sqlite remove enum - Google ÊêúÁ¥¢
// https://www.google.ca/search?q=why+sqlite+remove+enum&newwindow=1&sca_esv=594138259&sxsrf=AM9HkKk2DnxjPWuSkkTCs9V21GW-l252SA%3A1703737759082&ei=n_mMZdXTBJ-Y5OMPjae--A4&ved=0ahUKEwiVn67fpbGDAxUfDHkGHY2TD-8Q4dUDCBA&uact=5&oq=why+sqlite+remove+enum&gs_lp=Egxnd3Mtd2l6LXNlcnAiFndoeSBzcWxpdGUgcmVtb3ZlIGVudW0yBRAhGKABSMIdUABYmxxwAHgBkAEAmAFhoAGCDaoBAjIyuAEDyAEA-AEBwgIEECMYJ8ICCxAuGIAEGMcBGNEDwgIFEAAYgATCAgUQLhiABMICChAAGIAEGIoFGEPCAggQLhiABBjUAsICDhAuGIAEGMcBGK8BGI4FwgIIEAAYgAQYywHCAggQLhiABBjLAcICBhAAGB4YD8ICBBAAGB7CAgcQABiABBgMwgIGEAAYCBgewgIIEAAYgAQYogTCAgcQIRigARgK4gMEGAAgQYgGAQ&sclient=gws-wiz-serp
// 
// create a table of constant to miminc enum? - Google ÊêúÁ¥¢
// https://www.google.ca/search?q=create+a+table+of+constant+to+miminc+enum%3F
// 
// java - JPA / Hibernate - persist enums as table of constants - Stack Overflow
// https://stackoverflow.com/questions/34718942/jpa-hibernate-persist-enums-as-table-of-constants
// 
// c# - having table for fixed data or Enum? - Stack Overflow
// https://stackoverflow.com/questions/38366748/having-table-for-fixed-data-or-enum
// 
// enum ChatMsgType {
//   text
// }
